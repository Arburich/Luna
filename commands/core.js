var XMLHttpRequest = require("xmlhttprequest").XMLHttpRequest;
var moment = require("moment");
const Discord = require("discord.js");
exports.run = async(client, message, args, level) => {
	
	corelocations = {
		"Benitoite" : ["Metal Rich or Rocky","59 Virginis, Alchemia Virginis"],
		"Monazite" : ["Metal Rich or Rocky","59 Virginis, Alchemia Virginis"],
		"Rhodplumsite" : ["Metal Rich","59 Virginis, 8, Inner"],
		"Musgravite" : ["Rocky","59 Virginis, Alchemia Virginis"],
		"Void Opals" : ["Icy","59 Virginis, 8 G, Outter"],
		"Serendibite" : ["Metal Rich or Rocky","59 Virginis, Alchemia Virginis"],
		"Low Temperature Diamonds" : ["Icy","59 Virginis, 8 H, Outter"],
		"Alexandrite" : ["Metal Rich, Icy, or Rocky","59 Virginis, Alchemia Virginis"],
		"Grandidierite" : ["Metal Rich or Icy","59 Virginis, 8 E"],
	}
	var ParallelRequest = require('parallel-http-request');
	var config = {
    response: "simple"    // [optional] detail|simple|unirest, if empty then the response output is simple
};
	var request = new ParallelRequest(config);
	let argu = ""
		for (var i = 0; i < args.length; i++) {
			if (i == args.length - 1)
				argu += args[i];
			else
				argu += args[i] + " ";
		}
		if (!args[0]) {
			argu = "Low Temperature Diamonds"
		}
		/*===============================================*/

	function httpGet(theUrl) {
		var xmlHttp = new XMLHttpRequest();
		xmlHttp.open("GET", theUrl, false); // false for synchronous request
		xmlHttp.send(null);
		return xmlHttp.responseText;
	}
	function price() {
		//let systemLink = commodityPage.replace('+','%2B').replace(/ /g, '+').replace("&", "%26");

		//let uri = `https://elitebgs.app/api/ebgs/v4/commodityPages?name=${systemLink}`;
		let uri = `https://eddb.io/commodity`;
		request.add(uri)
	}
	async function SENDIT(request){
		const output = new Promise((resolve) =>{
		request.send(resolve)
	}).then(function(result){
		return result
	})
	return output
	}

	/*===============================================*/

	

	var fs = require("fs")
	//var comms = JSON.parse(fs.readFileSync("./commandStorage/commodities.json", "utf8"));
	var comms = JSON.parse(httpGet("https://eddb.io/archive/v6/commodities.json"))
	var commID = -1
		var name = ""
		price()
		var commodityPage = await SENDIT(request)
		//console.log(commodityPage[0].body)
		commodityPage = commodityPage[0].body.split("\n")
		var count = 0
		var coreprice = {}
		for (var i = 0; i < commodityPage.length; i++) {
			if (commodityPage[i].toLowerCase().includes("href=\"/commodity/")) {
				if(isNaN(parseInt(commodityPage[i+8].split(">")[1].split("<")[0].replace(/\,/g,''))	)){
					continue
				}
				coreprice[commodityPage[i].split(">")[2].split("<")[0].trim()] = [parseInt(commodityPage[i+8].split(">")[1].split("<")[0].replace(/\,/g,'')),commodityPage[i].split("\"")[1]]	
				
			}
		}
		var keyValues = []

		for (var key in coreprice) {
			//console.log(key)
			//.log(coreprice[key][1])
			keyValues.push([ key, coreprice[key][0] ])
		}
		keyValues.sort(function compare(kv1, kv2) {
			return kv2[1] - kv1[1]
		})
		console.log(keyValues[1][0])
		console.log(corelocations[keyValues[1][0]][0])
		const embed1 = {
		"title": "Click me for Full Commodity Page",
		"url": `https://eddb.io/commodity/`,
		"color": 7864575,
		"footer": {
			"text": "Information from EDDB, generated by Luna ðŸ’œ"
		},
		"author": {
			"name": `Top Cores of the Day`
		},
		"thumbnail": {
			"url": `https://cdn.discordapp.com/emojis/728048962367389728.png`
		},
		"fields": [{
				"name": `${keyValues[0][0]}`,
				"value": `https://eddb.io${coreprice[keyValues[0][0]][1]}\n\nMax Sell Price: **${keyValues[0][1]}** credits\n\nFound in: **${corelocations[keyValues[0][0]][0]}** rings\n\nClosest mining location: **${corelocations[keyValues[0][0]][1]} ring**`,
				"inline": true
			}, {
				"name": `${keyValues[1][0]}`,
				"value": `https://eddb.io${coreprice[keyValues[1][0]][1]}\n\nMax Sell Price: **${keyValues[1][1]}** credits\n\nFound in: **${corelocations[keyValues[1][0]][0]}** rings\n\nClosest mining location: **${corelocations[keyValues[1][0]][1]} ring**`,
				"inline": true
			}, {
				"name": `
				${keyValues[2][0]}`,
				"value": `https://eddb.io${coreprice[keyValues[2][0]][1]}\n\nMax Sell Price: **${keyValues[2][1]}** credits\n\nFound in: **${corelocations[keyValues[2][0]][0]}** rings\n\nClosest mining location: **${corelocations[keyValues[2][0]][1]} ring**`,
				"inline": true
			}
		]
	};
	console.log("about to send the embed")
	message.channel.send({
		embeds:[embed1]
	});

	//message.channel.send(output,{code :"asciidoc"})


};

exports.conf = {
	enabled: true,
	guildOnly: true,
	aliases: ["cores"],
	permLevel: "User"
};

exports.help = {
	name: "core",
	category: "Custom Commands",
	description: "Latest and Greatest Core Prices for you to enjoy",
	usage: "price <Commodity>"
};
